package com.example.shitzbank.common


/**
 * Универсальный запечатанный класс (sealed class), представляющий различные состояния
 * асинхронной операции (например, загрузки данных).
 *
 * Позволяет явно обрабатывать успешное выполнение, состояние загрузки и ошибки,
 * делая код более надежным и читаемым, особенно при работе с [Flow] или [LiveData].
 *
 * @param T Тип данных, которые ожидаются в случае успешного выполнения операции.
 */
sealed class ResultState<out T> {
    /**
     * Представляет успешное завершение операции с данными.
     *
     * @param data Данные, полученные в результате успешной операции.
     */
    data class Success<out T>(val data: T) : ResultState<T>()

    /**
     * Представляет состояние, когда операция находится в процессе выполнения (загрузка).
     */
    data object Loading : ResultState<Nothing>()

    /**
     * Представляет состояние ошибки при выполнении операции.
     *
     * @param message Опциональное сообщение об ошибке, предназначенное для пользователя или для отладки.
     * @param throwable Опциональный объект [Throwable], представляющий исходное исключение, вызвавшее ошибку.
     */
    data class Error(val message: String? = null, val throwable: Throwable? = null) : ResultState<Nothing>()
}
